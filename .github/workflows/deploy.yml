name: Build and Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create environment file
      run: |
        echo "NODE_ENV=production" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
        echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
        echo "NEXT_PUBLIC_ENGINE_API_URL=${{ secrets.NEXT_PUBLIC_ENGINE_API_URL }}" >> .env
        echo "NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }}" >> .env
        echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
        echo "CI=true" >> .env
        echo "NEXT_TELEMETRY_DISABLED=1" >> .env
        
    - name: Generate Prisma client
      run: npx prisma generate
      
    - name: Build application
      run: |
        # Next.js will automatically load the .env file we created above
        # No need to manually export variables - they're already in .env
        npm run build
        
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r .next/static deploy/
        cp -r .next/standalone deploy/
        cp -r public deploy/
        cp package.json deploy/
        cp .env deploy/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: deploy/
        retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: deploy/
        
    - name: Deploy to DigitalOcean droplet
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        source: "deploy/*"
        target: "/var/www/pinnacle-frontend"
        strip_components: 1

  # Regular restart job - runs on every deployment
  restart-services:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:        
    - name: Restart application services
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          cd /var/www/pinnacle-frontend
          
          # Set proper permissions for new deployment
          chmod +x server.js
          
          # Restart PM2 process with new code
          pm2 restart pinnacle-frontend || pm2 start ecosystem.config.js
          pm2 save
          
          # Quick nginx reload (in case of any changes)
          sudo systemctl reload nginx
          
          echo "‚úÖ Services restarted successfully"
          
  health-check:
    runs-on: ubuntu-latest
    needs: [restart-services]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment to be ready
      run: sleep 30
      
    - name: Health check
      run: |
        # Check if the app is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" http://64.227.181.245/ || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Health check passed - App is responding"
        else
          echo "‚ùå Health check failed - App returned status: $response"
          exit 1
        fi
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "üöÄ Deployment completed successfully!"
          echo "üåê App is live at: http://64.227.181.245/"
        else
          echo "üí• Deployment failed!"
        fi 