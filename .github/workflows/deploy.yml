# .github/workflows/deploy.yml
name: Build and Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
    
    - name: Create environment file
      run: |
        cat > .env <<EOF
        NODE_ENV=production
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXT_PUBLIC_ENGINE_API_URL=${{ secrets.NEXT_PUBLIC_ENGINE_API_URL }}
        NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }}
        NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
        CI=true
        NEXT_TELEMETRY_DISABLED=1
        EOF

    - name: Generate Prisma client
      run: npx prisma generate
      
    - name: Build application
      run: npm run build

    - name: Prepare deployment package
      run: |
        mkdir -p deployment
        rsync -av --exclude='node_modules' \
                  --exclude='.git' \
                  --exclude='.next/cache' \
                  --exclude='.next/trace' \
                  --exclude='.env.local' \
                  --exclude='.env.development' \
                  --exclude='.env.test' \
                  --exclude='*.log' \
                  --exclude='*.tmp' \
                  --exclude='deployment' \
                  ./ deployment/

    - name: Create deployment archive
      run: tar -czf app.tar.gz -C deployment .

    - name: Upload to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT || 22 }}
        source: "app.tar.gz"
        target: "/opt/pinnacle-algo"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
    - name: Setup server environment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT || 22 }}
        script: |
          # Install Node.js if not present
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Install PM2 if not present
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2..."
            sudo npm install -g pm2
          fi
          
          # Verify installations
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "PM2 version: $(pm2 --version)"

    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT || 22 }}
        script: |
          cd /opt/pinnacle-algo
          
          # Extract deployment package
          tar -xzf app.tar.gz && rm app.tar.gz
          
          # Install production dependencies
          npm install --omit=dev
          
          # Restart or start the application
          pm2 restart pinnacle-algo || pm2 start npm --name "pinnacle-algo" -- run start
          
          # Save PM2 configuration
          pm2 save
          
          # Show status
          pm2 status