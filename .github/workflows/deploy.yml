name: Build and Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create environment file
      run: |
        echo "NODE_ENV=production" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
        echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
        echo "NEXT_PUBLIC_ENGINE_API_URL=${{ secrets.NEXT_PUBLIC_ENGINE_API_URL }}" >> .env
        echo "NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }}" >> .env
        echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
        echo "CI=true" >> .env
        echo "NEXT_TELEMETRY_DISABLED=1" >> .env
        
    - name: Generate Prisma client
      run: npx prisma generate
      
    - name: Build application
      run: |
        # Next.js will automatically load the .env file we created above
        # No need to manually export variables - they're already in .env
        npm run build
        
    - name: Create deployment package
      run: |
        mkdir -p deploy
        
        echo "üì¶ Creating complete deployment package..."
        
        # Copy the entire .next folder (contains the built application)
        cp -r .next deploy/
        
        # Copy public assets
        cp -r public deploy/
        
        # Copy package.json for dependencies
        cp package.json deploy/
        
        # Copy package-lock.json for exact dependency versions
        cp package-lock.json deploy/
        
        # Copy environment file
        cp .env deploy/
        
        # Copy ecosystem.config.js for PM2 configuration
        cp ecosystem.config.js deploy/
        
        # Copy any other necessary config files
        if [ -f next.config.js ]; then
          cp next.config.js deploy/
        fi
        if [ -f prisma ]; then
          cp -r prisma deploy/
        fi
        
        # Copy source code files (needed for proper Next.js operation)
        if [ -d app ]; then
          cp -r app deploy/
        fi
        if [ -d pages ]; then
          cp -r pages deploy/
        fi
        if [ -d components ]; then
          cp -r components deploy/
        fi
        if [ -d lib ]; then
          cp -r lib deploy/
        fi
        if [ -d types ]; then
          cp -r types deploy/
        fi
        if [ -d styles ]; then
          cp -r styles deploy/
        fi
        
        # Copy any other source directories
        for dir in hooks utils constants; do
          if [ -d "$dir" ]; then
            cp -r "$dir" deploy/
          fi
        done
        
        echo "‚úÖ Deployment package created successfully"
        echo "üìÅ Contents of deploy directory:"
        ls -la deploy/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: deploy/
        retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: deploy/
        
    - name: Deploy to DigitalOcean droplet
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        source: "deploy/*"
        target: "/var/www/pinnacle-frontend"
        strip_components: 1

  # Regular restart job - runs on every deployment
  restart-services:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:        
    - name: Restart application services
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          cd /var/www/pinnacle-frontend
          
          echo "üîß Setting up deployment..."
          
          # Install dependencies if needed
          npm ci --only=production
          
          # Generate Prisma client on the server
          npx prisma generate
          
          # Create PM2 log directory if it doesn't exist
          sudo mkdir -p /var/log/pm2
          sudo chown $USER:$USER /var/log/pm2
          
          # Stop existing PM2 process if running
          pm2 stop pinnacle-frontend || true
          pm2 delete pinnacle-frontend || true
          
          # Start PM2 process with ecosystem config
          echo "üöÄ Starting Next.js deployment..."
          pm2 start ecosystem.config.js
          
          pm2 save
          
          # Quick nginx reload (in case of any changes)
          sudo systemctl reload nginx
          
          echo "‚úÖ Services restarted successfully"
          echo "üìä PM2 Status:"
          pm2 list