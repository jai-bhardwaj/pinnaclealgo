# .github/workflows/deploy.yml
name: Build and Deploy Full Repo to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
    
    - name: Create environment file
      run: |
        cat > .env <<EOF
        NODE_ENV=production
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXT_PUBLIC_ENGINE_API_URL=${{ secrets.NEXT_PUBLIC_ENGINE_API_URL }}
        NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }}
        NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
        CI=true
        NEXT_TELEMETRY_DISABLED=1
        EOF

    - name: Debug environment variables
      run: |
        echo "=== Environment Variable Debug ==="
        echo "NODE_ENV: $NODE_ENV"
        echo "CI: $CI"
        
        if [ -z "${{ secrets.NEXTAUTH_URL }}" ]; then
          echo "❌ NEXTAUTH_URL is NOT set in GitHub secrets"
        else
          echo "✅ NEXTAUTH_URL is set in GitHub secrets"
          echo "NEXTAUTH_URL length: ${#NEXTAUTH_URL}"
          echo "NEXTAUTH_URL first 10 chars: ${NEXTAUTH_URL:0:10}..."
          
          # Test if it's a valid URL
          if [[ $NEXTAUTH_URL =~ ^https?:// ]]; then
            echo "✅ NEXTAUTH_URL has valid protocol (http/https)"
          else
            echo "❌ NEXTAUTH_URL missing protocol (should start with http:// or https://)"
          fi
        fi
        
        if [ -z "${{ secrets.NEXTAUTH_SECRET }}" ]; then
          echo "❌ NEXTAUTH_SECRET is NOT set in GitHub secrets"
        else
          echo "✅ NEXTAUTH_SECRET is set in GitHub secrets"
          echo "NEXTAUTH_SECRET length: ${#NEXTAUTH_SECRET}"
        fi
        
        if [ -z "${{ secrets.DATABASE_URL }}" ]; then
          echo "❌ DATABASE_URL is NOT set in GitHub secrets"
        else
          echo "✅ DATABASE_URL is set in GitHub secrets"
          echo "DATABASE_URL length: ${#DATABASE_URL}"
        fi
        
        echo "=== End Debug ==="
      env:
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Generate Prisma client
      run: npx prisma generate
      
    - name: Build application
      run: npm run build

    - name: Prepare deployment directory
      run: |
        # Create a clean deployment directory
        mkdir -p deployment
        # Copy all files except exclusions
        rsync -av --exclude='node_modules' \
                  --exclude='.git' \
                  --exclude='.next/cache' \
                  --exclude='.next/trace' \
                  --exclude='.env.local' \
                  --exclude='.env.development' \
                  --exclude='.env.test' \
                  --exclude='*.log' \
                  --exclude='*.tmp' \
                  --exclude='deployment' \
                  ./ deployment/

    - name: Create deployment archive
      run: |
        # Create archive from the prepared directory
        tar -czf app.tar.gz -C deployment .

    - name: Upload to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT || 22 }}
        source: "app.tar.gz"
        target: "/opt/pinnacle-algo"

    - name: Deploy and start app
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT || 22 }}
        script: |
          cd /opt/pinnacle-algo
          tar -xzf app.tar.gz && rm app.tar.gz
          npm install --omit=dev
          pm2 restart pinnacle-algo || pm2 start npm --name "pinnacle-algo" -- run start
          pm2 save
          pm2 status