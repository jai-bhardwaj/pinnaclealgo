generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  username              String                 @unique
  hashedPassword        String
  firstName             String?
  lastName              String?
  phone                 String?
  role                  UserRole               @default(USER)
  status                UserStatus             @default(PENDING_VERIFICATION)
  emailVerified         Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLoginAt           DateTime?
  lockedUntil           DateTime?
  loginAttempts         Int                    @default(0)
  phoneVerified         Boolean                @default(false)
  twoFactorEnabled      Boolean                @default(false)
  twoFactorSecret       String?
  alert_templates       alert_templates[]
  alerts                alerts[]
  api_keys              api_keys[]
  audit_logs            audit_logs[]
  balances              balances?
  broker_configs        broker_configs[]
  notification_settings notification_settings?
  notifications         notifications[]
  orders                Order[]
  positions             Position[]
  risk_profiles         risk_profiles?
  strategies            Strategy[]
  strategy_configs      strategy_configs[]
  trades                trades[]
  user_profiles         user_profiles?
  user_sessions         user_sessions[]
  watchlists            watchlists[]

  @@index([email])
  @@index([role, status])
  @@index([status, createdAt])
  @@index([username])
  @@map("users")
}

model Strategy {
  id               String             @id @default(cuid())
  userId           String
  name             String
  description      String?
  strategyType     String
  assetClass       AssetClass
  symbols          String[]
  timeframe        TimeFrame
  status           StrategyStatus     @default(DRAFT)
  parameters       Json?
  riskParameters   Json?
  totalPnl         Float              @default(0)
  totalTrades      Int                @default(0)
  winningTrades    Int                @default(0)
  losingTrades     Int                @default(0)
  winRate          Float              @default(0)
  maxDrawdown      Float              @default(0)
  maxPositions     Int                @default(5)
  capitalAllocated Float              @default(100000)
  startTime        String?
  endTime          String?
  activeDays       String[]
  version          Int                @default(1)
  lastExecutedAt   DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  orders           Order[]
  users            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy_configs strategy_configs[]
  strategy_logs    strategy_logs[]

  @@index([assetClass, status])
  @@index([lastExecutedAt])
  @@index([status, createdAt])
  @@index([userId, status])
  @@map("strategies")
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  strategyId     String?
  symbol         String
  exchange       String
  side           OrderSide
  orderType      OrderType
  productType    ProductType
  quantity       Int
  price          Float?
  triggerPrice   Float?
  brokerOrderId  String?
  status         OrderStatus @default(PENDING)
  statusMessage  String?
  filledQuantity Int         @default(0)
  averagePrice   Float?
  tags           String[]
  notes          String?
  placedAt       DateTime?
  executedAt     DateTime?
  cancelledAt    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  variety        String      @default("NORMAL")
  parentOrderId  String?
  orders         Order?      @relation("ordersToorders", fields: [parentOrderId], references: [id])
  other_orders   Order[]     @relation("ordersToorders")
  strategy       Strategy?   @relation(fields: [strategyId], references: [id])
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades         trades[]

  @@index([brokerOrderId])
  @@index([status, placedAt])
  @@index([strategyId, status])
  @@index([symbol, exchange])
  @@index([userId, createdAt])
  @@map("orders")
}

model Position {
  id              String      @id @default(cuid())
  userId          String
  symbol          String
  exchange        String
  productType     ProductType
  quantity        Int
  averagePrice    Float
  lastTradedPrice Float
  pnl             Float
  realizedPnl     Float       @default(0)
  marketValue     Float
  dayChange       Float       @default(0)
  dayChangePct    Float       @default(0)
  firstBuyDate    DateTime?
  lastTradeDate   DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  users           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lastTradeDate])
  @@index([symbol, exchange])
  @@index([userId, symbol])
  @@map("positions")
}

model alert_templates {
  id        String   @id
  userId    String
  name      String
  symbol    String
  exchange  String
  condition String
  message   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model alerts {
  id          String    @id
  userId      String
  symbol      String
  exchange    String
  condition   String
  targetPrice Float
  isActive    Boolean   @default(true)
  isTriggered Boolean   @default(false)
  triggeredAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  users       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model api_keys {
  id          String    @id
  userId      String
  name        String
  keyHash     String    @unique
  permissions String[]
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  users       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model audit_logs {
  id        String      @id
  userId    String?
  action    AuditAction
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime    @default(now())
  users     User?       @relation(fields: [userId], references: [id])
}

model balances {
  id              String   @id
  userId          String   @unique
  availableCash   Float    @default(0)
  usedMargin      Float    @default(0)
  totalBalance    Float    @default(0)
  portfolioValue  Float    @default(0)
  totalPnl        Float    @default(0)
  dayPnl          Float    @default(0)
  buyingPower     Float    @default(0)
  marginUsed      Float    @default(0)
  marginAvailable Float    @default(0)
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  users           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model broker_configs {
  id           String     @id
  userId       String
  brokerName   BrokerName
  displayName  String?
  apiKey       String
  clientId     String
  password     String
  totpSecret   String?
  accessToken  String?
  refreshToken String?
  isActive     Boolean    @default(true)
  isConnected  Boolean    @default(false)
  lastSyncAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  users        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model market_data {
  id            String    @id
  symbol        String
  exchange      String
  open          Float
  high          Float
  low           Float
  close         Float
  volume        Int
  previousClose Float?
  change        Float?
  changePct     Float?
  timestamp     DateTime
  timeframe     TimeFrame
  createdAt     DateTime  @default(now())
}

model notification_settings {
  id                    String   @id
  userId                String   @unique
  orderExecution        Boolean  @default(true)
  strategyStatus        Boolean  @default(true)
  priceAlerts           Boolean  @default(true)
  riskViolations        Boolean  @default(true)
  smsRiskViolations     Boolean  @default(true)
  smsOrderFailures      Boolean  @default(true)
  smsAccountSecurity    Boolean  @default(true)
  smsSystemDowntime     Boolean  @default(true)
  emailDailySummary     Boolean  @default(false)
  emailWeeklyReport     Boolean  @default(true)
  emailMonthlyStatement Boolean  @default(true)
  emailRegulatory       Boolean  @default(true)
  maxAlertsPerMinute    Int      @default(10)
  quietHoursStart       String?
  quietHoursEnd         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  users                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model notifications {
  id        String             @id
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime           @default(now())
  readAt    DateTime?
  users     User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type, createdAt])
  @@index([userId, createdAt])
  @@index([userId, status])
}

model risk_profiles {
  id                   String    @id
  userId               String    @unique
  riskLevel            RiskLevel @default(MODERATE)
  maxDailyLossPct      Float     @default(0.02)
  maxWeeklyLossPct     Float     @default(0.05)
  maxMonthlyLossPct    Float     @default(0.10)
  maxPositionSizePct   Float     @default(0.10)
  maxOrderValue        Float     @default(50000)
  maxOrdersPerMinute   Int       @default(10)
  maxExposurePerSymbol Float     @default(0.05)
  stopLossEnabled      Boolean   @default(true)
  defaultStopLossPct   Float     @default(0.02)
  takeProfitEnabled    Boolean   @default(true)
  defaultTakeProfitPct Float     @default(0.04)
  allowedAssetClasses  String[]
  allowedExchanges     String[]
  tradingHoursOnly     Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  users                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model strategy_commands {
  id               String              @id
  strategyConfigId String
  command          StrategyCommandType
  parameters       Json?
  status           CommandStatus       @default(PENDING)
  createdAt        DateTime            @default(now())
  executedAt       DateTime?
  strategy_configs strategy_configs    @relation(fields: [strategyConfigId], references: [id], onDelete: Cascade)
}

model strategy_configs {
  id                String               @id
  userId            String
  strategyId        String?
  name              String               @unique
  className         String
  modulePath        String
  configJson        Json
  status            StrategyConfigStatus @default(ACTIVE)
  autoStart         Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime
  strategy_commands strategy_commands[]
  strategies        Strategy?            @relation(fields: [strategyId], references: [id])
  users             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy_metrics  strategy_metrics[]
}

model strategy_logs {
  id         String   @id
  strategyId String
  level      String
  message    String
  data       Json?
  timestamp  DateTime @default(now())
  strategies Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
}

model strategy_metrics {
  id               String           @id
  strategyConfigId String
  timestamp        DateTime         @default(now())
  pnl              Decimal          @default(0)
  positionsCount   Int              @default(0)
  ordersCount      Int              @default(0)
  successRate      Decimal          @default(0)
  metricsJson      Json?
  strategy_configs strategy_configs @relation(fields: [strategyConfigId], references: [id], onDelete: Cascade)
}

model system_config {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model trades {
  id             String      @id
  userId         String
  orderId        String
  tradeId        String?
  symbol         String
  exchange       String
  side           OrderSide
  quantity       Int
  price          Float
  productType    ProductType
  orderType      OrderType
  brokerage      Float       @default(0)
  taxes          Float       @default(0)
  totalCharges   Float       @default(0)
  netAmount      Float
  tradeTimestamp DateTime?
  createdAt      DateTime    @default(now())
  orders         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  users          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model trading_strategy_configs {
  id          String    @id @db.VarChar
  name        String    @unique(map: "ix_trading_strategy_configs_name") @db.VarChar
  class_name  String    @db.VarChar
  module_path String    @db.VarChar
  config_json Json      @db.Json
  status      String?   @db.VarChar
  auto_start  Boolean?
  created_at  DateTime? @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)

  @@index([created_at], map: "ix_trading_strategy_configs_created_at")
  @@index([status], map: "ix_trading_strategy_configs_status")
}

model user_profiles {
  id                String   @id
  userId            String   @unique
  avatar            String?
  timezone          String   @default("Asia/Kolkata")
  tradingExperience String?
  riskTolerance     String?
  preferredAssets   String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  bio               String?
  investmentGoals   String?
  language          String   @default("en")
  users             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_sessions {
  id        String   @id
  userId    String
  token     String   @unique
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model watchlists {
  id          String   @id
  userId      String
  name        String
  description String?
  symbols     String[]
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  users       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AssetClass {
  EQUITY
  DERIVATIVES
  CRYPTO
  COMMODITIES
  FOREX
}

enum AuditAction {
  LOGIN
  LOGOUT
  ORDER_PLACED
  ORDER_CANCELLED
  STRATEGY_CREATED
  STRATEGY_UPDATED
  STRATEGY_STARTED
  STRATEGY_STOPPED
  SETTINGS_CHANGED
  PASSWORD_CHANGED
  API_KEY_CREATED
  API_KEY_DELETED
}

enum BrokerName {
  ANGEL_ONE
  ZERODHA
  UPSTOX
  FYERS
  ALICE_BLUE
}

enum CommandStatus {
  PENDING
  EXECUTED
  FAILED
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum NotificationType {
  ORDER_EXECUTED
  ORDER_CANCELLED
  STRATEGY_STARTED
  STRATEGY_STOPPED
  RISK_VIOLATION
  SYSTEM_ALERT
  PRICE_ALERT
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  PLACED
  OPEN
  COMPLETE
  CANCELLED
  REJECTED
  ERROR
  QUEUED
  UNKNOWN
}

enum OrderType {
  MARKET
  LIMIT
  SL
  SL_M
}

enum ProductType {
  DELIVERY
  INTRADAY
  MARGIN
  NORMAL
  CARRYFORWARD
  BO
  CO
}

enum RiskLevel {
  CONSERVATIVE
  MODERATE
  AGGRESSIVE
  CUSTOM
}

enum StrategyCommandType {
  START
  STOP
  RESTART
  PAUSE
  RESUME
  UPDATE_CONFIG
}

enum StrategyConfigStatus {
  ACTIVE
  STOPPED
  ERROR
  PAUSED
}

enum StrategyStatus {
  DRAFT
  ACTIVE
  PAUSED
  STOPPED
  ERROR
}

enum TimeFrame {
  SECOND_1
  SECOND_5
  SECOND_15
  SECOND_30
  MINUTE_1
  MINUTE_3
  MINUTE_5
  MINUTE_15
  MINUTE_30
  HOUR_1
  HOUR_4
  DAY_1
  WEEK_1
  MONTH_1
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum assetclass {
  EQUITY
  DERIVATIVES
  CRYPTO
  COMMODITIES
  FOREX
}

enum brokername {
  ANGEL_ONE
  ZERODHA
  UPSTOX
  FYERS
  ALICE_BLUE
}

enum commandstatus {
  PENDING
  EXECUTED
  FAILED
}

enum orderside {
  BUY
  SELL
}

enum orderstatus {
  PENDING
  QUEUED
  PLACED
  OPEN
  COMPLETE
  CANCELLED
  REJECTED
  ERROR
  UNKNOWN
}

enum ordertype {
  MARKET
  LIMIT
  SL
  SL_M
}

enum producttype {
  DELIVERY
  INTRADAY
  MARGIN
  NORMAL
  CARRYFORWARD
  BO
  CO
}

enum strategycommandtype {
  START
  STOP
  RESTART
  PAUSE
  RESUME
  UPDATE_CONFIG
}

enum strategyconfigstatus {
  ACTIVE
  STOPPED
  ERROR
  PAUSED
}

enum strategystatus {
  DRAFT
  ACTIVE
  PAUSED
  STOPPED
  ERROR
}

enum timeframe {
  SECOND_1
  SECOND_5
  SECOND_15
  SECOND_30
  MINUTE_1
  MINUTE_3
  MINUTE_5
  MINUTE_15
  MINUTE_30
  HOUR_1
  HOUR_4
  DAY_1
  WEEK_1
  MONTH_1
}

enum userrole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum userstatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}
