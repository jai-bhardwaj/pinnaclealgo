generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Only User model for NextAuth - trading data comes from FastAPI backend
model User {
  id                    String                  @id(map: "users_new_pkey") @default(cuid())
  email                 String                  @unique(map: "users_new_email_key")
  username              String                  @unique(map: "users_new_username_key")
  hashedPassword        String                  @map("hashed_password")
  firstName             String?                 @map("first_name")
  lastName              String?                 @map("last_name")
  role                  String                  @default("USER")
  status                String                  @default("ACTIVE")
  emailVerified         Boolean                 @default(false) @map("email_verified")
  createdAt             DateTime                @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt             DateTime                @default(now()) @db.Timestamp(6) @map("updated_at")

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// NextAuth session management models  
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
