// Live Trading Engine Database Schema
// Optimized for production live trading only
// Updated: 2025-06-03

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT (SIMPLIFIED)
// ============================================================================

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  username          String     @unique
  hashedPassword    String
  firstName         String?
  lastName          String?
  phone             String?
  role              UserRole   @default(USER)
  status            UserStatus @default(ACTIVE)
  emailVerified     Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  profile           UserProfile?
  brokerConfigs     BrokerConfig[]
  strategies        Strategy[]
  strategyConfigs   StrategyConfig[]
  orders            Order[]
  trades            Trade[]
  positions         Position[]
  balance           Balance?
  riskProfile       RiskProfile?
  watchlists        Watchlist[]
  notifications     Notification[]
  notificationSettings NotificationSettings?
  auditLogs         AuditLog[]
  alertTemplates    AlertTemplate[]

  @@map("users")
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  avatar            String?
  timezone          String   @default("UTC")
  tradingExperience String?  // BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
  riskTolerance     String?  // LOW, MEDIUM, HIGH
  preferredAssets   String[] // Array of asset classes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// ============================================================================
// BROKER INTEGRATION
// ============================================================================

enum BrokerName {
  ANGEL_ONE
  ZERODHA
  UPSTOX
  FYERS
  ALICE_BLUE
}

model BrokerConfig {
  id           String     @id @default(cuid())
  userId       String
  brokerName   BrokerName
  displayName  String?
  apiKey       String
  clientId     String
  password     String     // Encrypted
  totpSecret   String?    // Encrypted
  accessToken  String?    // Encrypted
  refreshToken String?    // Encrypted
  isActive     Boolean    @default(true)
  isConnected  Boolean    @default(false)
  lastSyncAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, brokerName])
  @@map("broker_configs")
}

// ============================================================================
// RISK MANAGEMENT
// ============================================================================

enum RiskLevel {
  CONSERVATIVE
  MODERATE
  AGGRESSIVE
  CUSTOM
}

model RiskProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  riskLevel             RiskLevel @default(MODERATE)
  maxDailyLossPct       Float     @default(0.02)    // 2%
  maxWeeklyLossPct      Float     @default(0.05)    // 5%
  maxMonthlyLossPct     Float     @default(0.10)    // 10%
  maxPositionSizePct    Float     @default(0.10)    // 10%
  maxOrderValue         Float     @default(50000)   // ₹50,000
  maxOrdersPerMinute    Int       @default(10)
  maxExposurePerSymbol  Float     @default(0.05)    // 5%
  stopLossEnabled       Boolean   @default(true)
  defaultStopLossPct    Float     @default(0.02)    // 2%
  takeProfitEnabled     Boolean   @default(true)
  defaultTakeProfitPct  Float     @default(0.04)    // 4%
  allowedAssetClasses   String[]  // EQUITY, DERIVATIVES, CRYPTO, COMMODITIES
  allowedExchanges      String[]  // NSE, BSE, MCX, etc.
  tradingHoursOnly      Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("risk_profiles")
}

// ============================================================================
// TRADING STRATEGIES
// ============================================================================

enum StrategyStatus {
  DRAFT
  ACTIVE
  PAUSED
  STOPPED
  ERROR
}

enum AssetClass {
  EQUITY
  DERIVATIVES
  CRYPTO
  COMMODITIES
  FOREX
}

enum TimeFrame {
  SECOND_1
  SECOND_5
  SECOND_15
  SECOND_30
  MINUTE_1
  MINUTE_3
  MINUTE_5
  MINUTE_15
  MINUTE_30
  HOUR_1
  HOUR_4
  DAY_1
  WEEK_1
  MONTH_1
}

model Strategy {
  id                String         @id @default(cuid())
  userId            String
  name              String
  description       String?
  strategyType      String         // momentum, mean_reversion, breakout, etc.
  assetClass        AssetClass
  symbols           String[]       // Array of symbols to trade
  timeframe         TimeFrame
  status            StrategyStatus @default(DRAFT)
  
  // Strategy Parameters
  parameters        Json           // Strategy-specific parameters
  riskParameters    Json           // Risk management parameters
  
  // Trading Configuration
  maxPositions      Int            @default(5)
  capitalAllocated  Float          @default(100000) // ₹1,00,000
  
  // Performance Metrics
  totalPnl          Float          @default(0)
  totalTrades       Int            @default(0)
  winningTrades     Int            @default(0)
  losingTrades      Int            @default(0)
  winRate           Float          @default(0)
  maxDrawdown       Float          @default(0)
  
  // Scheduling
  startTime         String?        // HH:MM format
  endTime           String?        // HH:MM format
  activeDays        String[]       // Array of days: MON, TUE, etc.
  
  // Metadata
  version           Int            @default(1)
  lastExecutedAt    DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders            Order[]
  strategyConfigs   StrategyConfig[]
  strategyLogs      StrategyLog[]

  @@map("strategies")
}

model StrategyLog {
  id         String   @id @default(cuid())
  strategyId String
  level      String   // INFO, WARNING, ERROR
  message    String
  data       Json?    // Additional log data
  timestamp  DateTime @default(now())

  strategy Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@map("strategy_logs")
}

// ============================================================================
// ENHANCED STRATEGY EXECUTION
// ============================================================================

enum StrategyConfigStatus {
  ACTIVE
  STOPPED
  ERROR
  PAUSED
}

enum StrategyCommandType {
  START
  STOP
  RESTART
  PAUSE
  RESUME
  UPDATE_CONFIG
}

enum CommandStatus {
  PENDING
  EXECUTED
  FAILED
}

model StrategyConfig {
  id                String                @id @default(cuid())
  userId            String
  strategyId        String?               // Link to existing Strategy model
  name              String                @unique
  className         String                // Python class name
  modulePath        String                // Python module path
  configJson        Json                  // Configuration for the strategy
  status            StrategyConfigStatus  @default(ACTIVE)
  autoStart         Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy          Strategy?             @relation(fields: [strategyId], references: [id], onDelete: SetNull)
  commands          StrategyCommand[]
  metrics           StrategyMetric[]

  @@map("strategy_configs")
}

model StrategyCommand {
  id                String                @id @default(cuid())
  strategyConfigId  String
  command           StrategyCommandType
  parameters        Json?
  status            CommandStatus         @default(PENDING)
  createdAt         DateTime              @default(now())
  executedAt        DateTime?

  // Relations
  strategyConfig    StrategyConfig        @relation(fields: [strategyConfigId], references: [id], onDelete: Cascade)

  @@map("strategy_commands")
}

model StrategyMetric {
  id                String                @id @default(cuid())
  strategyConfigId  String
  timestamp         DateTime              @default(now())
  pnl               Decimal               @default(0)
  positionsCount    Int                   @default(0)
  ordersCount       Int                   @default(0)
  successRate       Decimal               @default(0)
  metricsJson       Json?

  // Relations
  strategyConfig    StrategyConfig        @relation(fields: [strategyConfigId], references: [id], onDelete: Cascade)

  @@map("strategy_metrics")
}

// ============================================================================
// ORDERS & TRADES (LIVE ONLY)
// ============================================================================

enum OrderSide {
  BUY
  SELL
}

enum OrderType {
  MARKET
  LIMIT
  SL        // Stop Loss
  SL_M      // Stop Loss Market
}

enum ProductType {
  DELIVERY
  INTRADAY
  MARGIN
}

enum OrderStatus {
  PENDING
  PLACED
  OPEN
  COMPLETE
  CANCELLED
  REJECTED
  ERROR
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  strategyId        String?
  
  // Order Details
  symbol            String
  exchange          String
  side              OrderSide
  orderType         OrderType
  productType       ProductType
  quantity          Int
  price             Float?
  triggerPrice      Float?
  variety           String      @default("NORMAL")  // NORMAL, AMO, BO, CO, ICEBERG
  
  // Execution Details
  brokerOrderId     String?
  status            OrderStatus @default(PENDING)
  statusMessage     String?
  filledQuantity    Int         @default(0)
  averagePrice      Float?
  
  // Metadata
  tags              String[]    // Custom tags
  notes             String?
  
  // Timestamps
  placedAt          DateTime?
  executedAt        DateTime?
  cancelledAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy          Strategy?   @relation(fields: [strategyId], references: [id], onDelete: SetNull)
  trades            Trade[]

  @@map("orders")
}

model Trade {
  id              String      @id @default(cuid())
  userId          String
  orderId         String
  
  // Trade Details
  tradeId         String?     // Broker trade ID
  symbol          String
  exchange        String
  side            OrderSide
  quantity        Int
  price           Float
  productType     ProductType
  orderType       OrderType
  
  // Fees & Charges
  brokerage       Float       @default(0)
  taxes           Float       @default(0)
  totalCharges    Float       @default(0)
  netAmount       Float       // Amount after all charges
  
  // Timestamps
  tradeTimestamp  DateTime?
  createdAt       DateTime    @default(now())

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  order           Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("trades")
}

// ============================================================================
// PORTFOLIO & POSITIONS
// ============================================================================

model Position {
  id                String      @id @default(cuid())
  userId            String
  symbol            String
  exchange          String
  productType       ProductType
  
  // Position Details
  quantity          Int         // Net quantity (can be negative for short)
  averagePrice      Float
  lastTradedPrice   Float
  pnl               Float       // Unrealized P&L
  realizedPnl       Float       @default(0) // Realized P&L
  
  // Market Data
  marketValue       Float       // Current market value
  dayChange         Float       @default(0)
  dayChangePct      Float       @default(0)
  
  // Metadata
  firstBuyDate      DateTime?
  lastTradeDate     DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol, exchange, productType])
  @@map("positions")
}

model Balance {
  id              String   @id @default(cuid())
  userId          String   @unique
  
  // Cash Balances
  availableCash   Float    @default(0)
  usedMargin      Float    @default(0)
  totalBalance    Float    @default(0)
  
  // Portfolio Values
  portfolioValue  Float    @default(0)
  totalPnl        Float    @default(0)
  dayPnl          Float    @default(0)
  
  // Limits
  buyingPower     Float    @default(0)
  marginUsed      Float    @default(0)
  marginAvailable Float    @default(0)
  
  // Timestamps
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("balances")
}

// ============================================================================
// MARKET DATA & WATCHLISTS
// ============================================================================

model Watchlist {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  symbols     String[] // Array of symbols
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("watchlists")
}

model MarketData {
  id              String   @id @default(cuid())
  symbol          String
  exchange        String
  
  // OHLCV Data
  open            Float
  high            Float
  low             Float
  close           Float
  volume          Int
  
  // Additional Data
  previousClose   Float?
  change          Float?
  changePct       Float?
  
  // Metadata
  timestamp       DateTime
  timeframe       TimeFrame
  createdAt       DateTime @default(now())

  @@unique([symbol, exchange, timestamp, timeframe])
  @@map("market_data")
}

// ============================================================================
// NOTIFICATIONS & ALERTS (HYBRID APPROACH)
// ============================================================================

enum NotificationType {
  // Critical notifications (stored in DB)
  RISK_VIOLATION
  ACCOUNT_SECURITY
  REGULATORY_NOTICE
  SYSTEM_MAINTENANCE
  STRATEGY_PERFORMANCE_SUMMARY
  ACCOUNT_STATEMENT
  COMPLIANCE_ALERT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

// Only critical notifications stored in database
model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?              // Additional notification data
  status    NotificationStatus @default(UNREAD)
  expiresAt DateTime?          // Optional expiration
  createdAt DateTime           @default(now())
  readAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// User notification preferences
model NotificationSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  
  // Real-time alerts (Redis-based)
  orderExecution    Boolean  @default(true)
  strategyStatus    Boolean  @default(true)
  priceAlerts       Boolean  @default(true)
  riskViolations    Boolean  @default(true)
  
  // SMS alerts (critical only)
  smsRiskViolations Boolean  @default(true)
  smsOrderFailures  Boolean  @default(true)
  smsAccountSecurity Boolean @default(true)
  smsSystemDowntime Boolean  @default(true)
  
  // Email notifications
  emailDailySummary    Boolean @default(false)
  emailWeeklyReport    Boolean @default(true)
  emailMonthlyStatement Boolean @default(true)
  emailRegulatory      Boolean @default(true)
  
  // Alert frequency controls
  maxAlertsPerMinute   Int     @default(10)
  quietHoursStart      String? // HH:MM format
  quietHoursEnd        String? // HH:MM format
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

// Price/Volume alerts (metadata only - actual processing in Redis)
model AlertTemplate {
  id          String   @id @default(cuid())
  userId      String
  name        String   // User-friendly name
  symbol      String
  exchange    String
  condition   String   // JSON condition for Redis processing
  message     String?  // Custom alert message
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alert_templates")
}

// ============================================================================
// AUDIT & COMPLIANCE
// ============================================================================

enum AuditAction {
  LOGIN
  LOGOUT
  ORDER_PLACED
  ORDER_CANCELLED
  ORDER_MODIFIED
  STRATEGY_STARTED
  STRATEGY_STOPPED
  STRATEGY_CREATED
  STRATEGY_UPDATED
  STRATEGY_DELETED
  POSITION_OPENED
  POSITION_CLOSED
  RISK_LIMIT_CHANGED
  BROKER_CONNECTED
  BROKER_DISCONNECTED
  SYSTEM_ERROR
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  action      AuditAction
  resource    String?     // Resource ID (order_id, strategy_id, etc.)
  details     Json?       // Additional details
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// ============================================================================
// SYSTEM CONFIGURATION
// ============================================================================

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
} 